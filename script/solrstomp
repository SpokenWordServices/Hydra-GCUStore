#!/usr/bin/env ruby

require 'optparse'

options = {}

optparse = OptionParser.new do|opts|
  opts.banner = "Usage: solrstomp [options]"

  options[:hydra_home] = nil
  opts.on( '-y', '--hydra_home PATH', 'Load the Hydra instance  at this path' ) do |path|
    if File.exist?(File.join(path,"config","environment.rb"))
      options[:hydra_home] = path
    else 
      puts "#{path} does not appear to be a valid rails home"
      exit
    end
  end

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
end

optparse.parse!

begin; require 'rubygems'; rescue; end

if options[:hydra_home]

  puts "Loading app..."

  Dir.chdir(options[:hydra_home])

  require File.join(options[:hydra_home],"config","environment.rb")
  puts "app loaded"
else
  puts "The -y or --hydra_home PATH option is mandatory. Please provide the path to the root of a valid Hydra instance."
  exit 1
end


require 'stomp'

puts "loading listener"

begin
  @port = 61613
  @host = "localhost"
  @user = "fedoraStomper"
  @password = "fedoraStomper"
  @reliable = true
  @clientid = "fedora_stomper"
  @destination = "/topic/fedora.apim.update"


  $stderr.print "Connecting to stomp://#{@host}:#{@port} as #{@user}\n"
  @conn = Stomp::Connection.open(@user, @password, @host, @port, @reliable, 5, {"client-id" => @clientid} )
  $stderr.print "Getting output from #{@destination}\n"
  
  @conn.subscribe(@destination, {"activemq.subscriptionName" => @clientid, :ack =>"client" })
  while true
      @msg = @conn.receive
      pid = @msg.headers["pid"]
      method = @msg.headers["methodName"]

      puts @msg.headers.inspect
      puts "\nPID: #{@msg.headers["pid"]}\n"
      unless method == "purgeObject"
        solrizer = Solrizer::Fedora::Solrizer.new
        solrizer.solrize @msg.headers["pid"]
      else
        ActiveFedora::SolrService.instance.conn.delete(pid)
      end
      puts  "updated solr index for #{@msg.headers["pid"]}\n"
      @conn.ack @msg.headers["message-id"]
  end
  @conn.join

rescue Exception => e
p e
end

